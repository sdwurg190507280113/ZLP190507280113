git是一个非常给力的版本控制工具。我理解的版本控制是指对项目开发的各个阶段的控制，比如说项目Release版本其实就是项目开发成熟后的稳定版本。（怎么办，我好像自己看这句话也不太懂TnT） 
在之前的小打小闹的开发过程中，如果我想对某个项目进行修改，可是不确定修改是否有效时，我会拷贝一份项目保存，然后对副本进行开发修改，这样子有几个缺点：1、将源码、各项资源文件以及依赖的库全部保存有时候项目太大会占额外空间；2、拷贝后路径通常会改变，这样还得重新设置包含路径，库目录；3、有时候所做的修改没办法记录，自己也就无法清晰、高效的控制项目开发进程，解决方法就变成了每个副本文件夹各种名字，如：“pro_改了*”（当然开发过程中会尽量避免中文路径，此处仅供理解），诸如种种。 
而git可以很有效的解决上述问题：1、git保存各个版本是保存其修改信息，即“添加了*”等等，这样避免了占用额外空间以及无法记录修改的问题；2、git不同分支（分支概念稍后讲述）是工作在同一工作目录下，所以不存在重新设置路径等问题。
git是一个非常给力的版本控制工具。我理解的版本控制是指对项目开发的各个阶段的控制，比如说项目Release版本其实就是项目开发成熟后的稳定版本。（怎么办，我好像自己看这句话也不太懂TnT） 
在之前的小打小闹的开发过程中，如果我想对某个项目进行修改，可是不确定修改是否有效时，我会拷贝一份项目保存，然后对副本进行开发修改，这样子有几个缺点：1、将源码、各项资源文件以及依赖的库全部保存有时候项目太大会占额外空间；2、拷贝后路径通常会改变，这样还得重新设置包含路径，库目录；3、有时候所做的修改没办法记录，自己也就无法清晰、高效的控制项目开发进程，解决方法就变成了每个副本文件夹各种名字，如：“pro_改了*”（当然开发过程中会尽量避免中文路径，此处仅供理解），诸如种种。 
而git可以很有效的解决上述问题：1、git保存各个版本是保存其修改信息，即“添加了*”等等，这样避免了占用额外空间以及无法记录修改的问题；2、git不同分支（分支概念稍后讲述）是工作在同一工作目录下，所以不存在重新设置路径等问题。
